package org.xtext.example.mydsl.generator

import fr.ice.fsm.model.fsm.FSM
import fr.ice.fsm.model.fsm.State
import fr.ice.fsm.model.fsm.Transition
import java.util.HashMap
import java.util.Scanner

class VisitorCompil implements Visitor {
	val NEWLINE = "\r\n"
	val TAB = "\t"
	
	var numState = 0	//Contient le numéro du prochain état
	var numStateInit = -1	//Contiendra le numéro de l'état initial
	
	var mapState = new HashMap<String,Integer>()
	
	
	override visitFSM(FSM f){
		var name = f.getName()
		
		var res = new StringBuilder()
		
		res.append("public class usageExemple {" + NEWLINE +
			TAB + "public void main(String[] args) {" + NEWLINE +
			TAB + TAB + "//Initialization" + NEWLINE
		)
		res.append(TAB + TAB + "//We start by creating the context." + NEWLINE)
		res.append(TAB + TAB + "FSMContext context = new FSMContext();" + NEWLINE)
		
		for(s: f.getState()){
			res.append(TAB + TAB + "//Then we create the states." + NEWLINE)
			res.append(s.accept(this) + NEWLINE)
		}
		
		res.append(TAB + TAB + "//We put the init state into the context." + NEWLINE)
		res.append(TAB + TAB + "context.changeState(s" + numStateInit + ");" + NEWLINE)
		
		for(t: f.getTransition()){
			res.append(TAB + TAB + "//We create the transitions." + NEWLINE)
			res.append(t.accept(this) + NEWLINE)
		}
		
		res.append(TAB + TAB + "//Main" + NEWLINE +
			TAB + "Scanner scanner = new Scanner(System.in);" + NEWLINE +
			TAB + "while(true)" + NEWLINE +
			TAB + TAB + "context.getInput(scanner.nextLine());" + NEWLINE +
			"}"
		)
		
		return res
	}
	
	override visitState(State s){
		var entry = s.getEntry()
		var name = s.getName()
		var init = s.isIsInitState()
		
		var numCurrentState = -1
		//TODO
		if ( !mapState.containsKey(name) )
			mapState.put(name, numState)
		
		if (init){
			if (numStateInit != -1){
				System.out.println("Attention ! Plus d'un état est désigné comme initial !" + NEWLINE +
					"L'état " + numStateInit + " est gardé comme état initial.")
			}
		}
		
		var res = new StringBuilder()
		
		res.append(TAB+ "FSMState s" + numState++ + " = new FSMState(context, \"" + entry + "\");" +NEWLINE)
		
		return res
	}
	
	override visitTransition(Transition t){
		var input = t.getInput()
		var name = t.getName()
		
		//C'est compliqué pour rien : on fera toujours les états avant les transitions.
		var end_state = t.getEnd_state().getName()
		var num_end_state = -1
		
		if ( mapState.containsKey(end_state) )
			num_end_state = mapState.get(end_state)
		else {
			num_end_state = numState++
			mapState.put(end_state, num_end_state)
		}
		
		
		var start_state = t.getStart_state().getName()
		var num_start_state = -1
		
		if ( mapState.containsKey(start_state) )
			num_start_state = mapState.get(start_state)
		else {
			num_start_state = numState++
			mapState.put(start_state, num_start_state)
		}
		
		
		var res = new StringBuilder()
		
		res.append(TAB + "s" + num_start_state + ".addTransition(\""
			+ input + "\", \"" + name + "\", s" + num_end_state + ");" + NEWLINE
		)
		
		return res
		
	}
	
	
	
	//to delete
	def StringBuilder accept(State state, VisitorCompil v){
		return v.visitState(state)
	}
	def StringBuilder accept(Transition transition, VisitorCompil v){
		return v.visitTransition(transition)
	}
}