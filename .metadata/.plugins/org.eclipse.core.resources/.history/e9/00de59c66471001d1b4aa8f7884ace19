package org.xtext.example.mydsl.generator

import fr.ice.fsm.model.fsm.FSM
import fr.ice.fsm.model.fsm.State
import fr.ice.fsm.model.fsm.Transition
import java.util.Map
import java.util.HashMap
import java.util.Scanner

class VisitorInterp implements Visitor {
	private Scanner scanner
	private String userInput	//Input que rentrera l'utilisateur.
	private Map<State,State> validTransitions
	private State currentState
	
	override visitFSM(FSM f) {
		var res = new StringBuilder()
		var name = f.getName()
		
		//On récupère l'état initial, qui sera le premier état courrant.
		for(s: f.getState()){
			if (s.isIsInitState())
				currentState = s
		}
		
		scanner = new Scanner(System.in)
		
		//On récupère l'input de l'utilisateur.
		userInput = scanner.nextLine()
		
		//On récupère toutes les transitions valides pour cet input.
		validTransitions = new HashMap<State,State>()
		for(t: f.getTransition()){
			if (t.getInput() == userInput) {
				
				var end_state = t.getEnd_state()
				var start_state = t.getStart_state()
				
				if (validTransitions.containsKey(start_state)) {
					System.out.println("Non determinism")
				}
				validTransitions.put(start_state, end_state)			
			}
		}
		
		validTransitions.get(currentState)
		
		
		
		return res
	}
	
	override visitState(State s) {
		var entry = s.getEntry()
		var name = s.getName()
		var init = s.isIsInitState()
		
		return new StringBuilder()
	}
	
	override visitTransition(Transition t) {		
		return new StringBuilder()
	}
	
	
	//to delete
	def StringBuilder accept(State state, VisitorInterp v){
		return v.visitState(state)
	}
	def StringBuilder accept(Transition transition, VisitorInterp v){
		return v.visitTransition(transition)
	}
}